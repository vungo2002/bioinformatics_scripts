#!/usr/bin/env python3

"""
The purpose of this script is to convert VCF file that was generated by the
Somatic variant caller (SENTIEON) so that the resulting VCF files
will include at least GT:AD:DP. The other fields will be kept the same.
DP will be infered by AD (DP = sum(AD))
"""
import argparse
import vcf
from sys import argv

def dp_exists(vcf_file):
    """
    Look at the header of the vcf file and check if '##FORMAT=<ID=DP' exists
    """
    reader = vcf.Reader(open(vcf_file, 'r'))
    if "DP" in reader.formats:
        return True
    else:
        return False
    return

# get all the lines in the header
def get_vcf_header(vcf_file):
    header = []
    for line in open(vcf_file):
        if line.startswith("##"):
            header += [line.strip()]
        else:
            break
    return header
def insert_format_header(vcf_header, format_str, in_front=True):
    """
    Given a vcf_header as a list, add a format string to front
    """
    new_header = []
    for i in range(len(vcf_header)):
        if in_front:
            if vcf_header[i].startswith("##FORMAT="):
                if vcf_header[i - 1].startswith("##FORMAT=") == False: # this is the first FORMAT line
                    new_header += [format_str] # add to first
        else: # in back
            if vcf_header[i].startswith("##FORMAT="):
                if vcf_header[i + 1].startswith("##FORMAT=") == False: # this is the last FORMAT line
                    new_header += [format_str] # add to last
        new_header += [vcf_header[i]]
        
    return new_header

def add_dp_to_line(fmt, values):
    fmt_list = fmt.split(":")
    
    # locate where AD is 
    ad_idx = fmt_list.index("AD")
    
    ads = [int(x) for x in values.split(":")[ad_idx].split(",")]
    dp = str(sum(ads))
    
    new_fmt = "DP:" + fmt
    new_values = dp + ":" + values 
    return new_fmt, new_values


def main():
    vcf_file = argv[1]
    out_file = argv[2]
    
    # check if DP exists:
    if dp_exists(vcf_file):
        print("DP exists. Nothing to do.")
        return

    # DP doesn't exist in vcf_file 
    header = get_vcf_header(vcf_file)
    format_str = '##FORMAT=<ID=DP,Number=1,Type=Integer,Description="Read Depth">'
    new_header = insert_format_header(header, format_str)

    with open(out_file, 'w') as f:
        f.write('\n'.join(new_header) + '\n')

        # now for each of the line in the vcf_file:
        for line in open(vcf_file):
            if line.startswith("#"):
                if line.startswith("#CHROM"):
                    f.write(line)
                    continue
                else:
                    continue
            tmp = line.strip().split('\t')
            fmt = tmp[8]
            values = tmp[9]
            new_fmt, new_values = add_dp_to_line(fmt, values)
            #print(new_fmt)
            #print(new_values)
            tmp[8] = new_fmt
            tmp[9] = new_values
            new_line = '\t'.join(tmp)
            #print(new_line)
            f.write(new_line + '\n')

    return




if __name__=="__main__":
    main()