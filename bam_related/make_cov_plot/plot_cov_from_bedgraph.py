#!/usr/bin/env python3

# this script plots the coverages from the bedgraph file generated by deeptools 
from sys import argv
import numpy as np
import matplotlib.pyplot as plt

infile = argv[1]
outfile = argv[2]



coverages = []
x_labels = []
for line in open(infile):
    tmp = line.strip().split()
    cov = float(tmp[-1])
    chromname = tmp[0]
    if "_" in chromname or "chr" not in chromname or "chrM" in chromname or "EBV" in chromname:
        continue
    #if tmp[0] != "chr1":
    #    continue
    coverages += [cov]
    x_labels += [tmp[0]]
len(coverages)
# norm it down to larger bins:
merge_factor = 1 # merge the bins into even larger bins, integer 1+
readsize = 150
covs = []
curtotal = 0
x_labels_new = []

for i in range(len(coverages)):
    curtotal += coverages[i]
    i += 1
    if i%merge_factor == 0: # average per 100 bins -> total length = 100*binsize = 100*5k = 500k
        covs += [curtotal/merge_factor/50000*readsize]
        curtotal = 0
        x_labels_new += [x_labels[i-1]]


# normalize the coverage by mean:
average_cov = np.mean(covs)
for i in range(len(covs)):
    covs[i] = covs[i]/average_cov*2 # normalize to 2n 


x_labels_locs = {}
x_labels_avg_covs = {}
chromorder = []
for i in range(len(x_labels_new)):
    chrom = x_labels_new[i]
    if "chr" not in chrom or "_" in chrom: # ignore the junks
        continue
    if chrom not in x_labels_locs:
        x_labels_locs[chrom] = 1
        chromorder += [chrom]
    else:
        x_labels_locs[chrom] += 1

# create locations for the ticks
total_counts = 0
for i in x_labels_locs:
    total_counts += x_labels_locs[i]
total_counts
newlocs = []
prev_loc = 0
boundary_locs = []
for chrom in chromorder:
    chromsize = x_labels_locs[chrom]
    newlocs += [prev_loc + chromsize/2]
    boundary_locs += [prev_loc + chromsize]
    prev_loc = boundary_locs[-1]
for i in range(len(newlocs)):
    print (newlocs[i], chromorder[i])




# ploting 
print("plotting", outfile,"...")
fig, ax = plt.subplots(nrows=1, ncols=1 )
ax.scatter(x=range(len(covs)), y = covs, alpha=0.5, color = "green", s = 0.5)
fig.set_figheight(10)
fig.set_figwidth(20)
ax.set_xticks(ticks=newlocs)
ax.set_xticklabels(labels=chromorder, rotation=90)
ax.set_title(infile.split('/')[-1])

plt.ylim(0,10)
for loc in boundary_locs:
    plt.axvline(x=loc, ms = 0.2, alpha=0.7, color='black')

plt.savefig(outfile)
#plt.show()